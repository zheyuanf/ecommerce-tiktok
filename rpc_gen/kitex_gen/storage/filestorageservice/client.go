// Code generated by Kitex v0.9.1. DO NOT EDIT.

package filestorageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	storage "github.com/zheyuanf/ecommerce-tiktok/rpc_gen/kitex_gen/storage"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UploadFile(ctx context.Context, Req *storage.UploadFileRequest, callOptions ...callopt.Option) (r *storage.UploadFileResponse, err error)
	NewMultiUpload(ctx context.Context, Req *storage.NewMultiUploadRequest, callOptions ...callopt.Option) (r *storage.NewMultiUploadResponse, err error)
	AbortMultiUpload(ctx context.Context, Req *storage.AbortMultiUploadRequest, callOptions ...callopt.Option) (r *storage.AbortMultiUploadResponse, err error)
	GetMultiUploadProgress(ctx context.Context, Req *storage.GetMultiUploadProgressRequest, callOptions ...callopt.Option) (r *storage.GetMultiUploadProgressResponse, err error)
	MergeFileChunks(ctx context.Context, Req *storage.MergeFileChunksRequest, callOptions ...callopt.Option) (r *storage.MergeFileChunksResponse, err error)
	GetDownloadUrl(ctx context.Context, Req *storage.GetDownloadUrlRequest, callOptions ...callopt.Option) (r *storage.GetDownloadUrlResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFileStorageServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFileStorageServiceClient struct {
	*kClient
}

func (p *kFileStorageServiceClient) UploadFile(ctx context.Context, Req *storage.UploadFileRequest, callOptions ...callopt.Option) (r *storage.UploadFileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadFile(ctx, Req)
}

func (p *kFileStorageServiceClient) NewMultiUpload(ctx context.Context, Req *storage.NewMultiUploadRequest, callOptions ...callopt.Option) (r *storage.NewMultiUploadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.NewMultiUpload(ctx, Req)
}

func (p *kFileStorageServiceClient) AbortMultiUpload(ctx context.Context, Req *storage.AbortMultiUploadRequest, callOptions ...callopt.Option) (r *storage.AbortMultiUploadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AbortMultiUpload(ctx, Req)
}

func (p *kFileStorageServiceClient) GetMultiUploadProgress(ctx context.Context, Req *storage.GetMultiUploadProgressRequest, callOptions ...callopt.Option) (r *storage.GetMultiUploadProgressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMultiUploadProgress(ctx, Req)
}

func (p *kFileStorageServiceClient) MergeFileChunks(ctx context.Context, Req *storage.MergeFileChunksRequest, callOptions ...callopt.Option) (r *storage.MergeFileChunksResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MergeFileChunks(ctx, Req)
}

func (p *kFileStorageServiceClient) GetDownloadUrl(ctx context.Context, Req *storage.GetDownloadUrlRequest, callOptions ...callopt.Option) (r *storage.GetDownloadUrlResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDownloadUrl(ctx, Req)
}
