// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package storage

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *UploadFileRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadFileRequest[number], err)
}

func (x *UploadFileRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadFileRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileData, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *UploadFileRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FileType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadFileRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Checksum, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadFileResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *NewMultiUploadRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewMultiUploadRequest[number], err)
}

func (x *NewMultiUploadRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewMultiUploadRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewMultiUploadRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TotalChunks, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *URL) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_URL[number], err)
}

func (x *URL) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *URL) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ChunkNumber, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *NewMultiUploadResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewMultiUploadResponse[number], err)
}

func (x *NewMultiUploadResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewMultiUploadResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v URL
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PresignedUrls = append(x.PresignedUrls, &v)
	return offset, nil
}

func (x *AbortMultiUploadRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AbortMultiUploadRequest[number], err)
}

func (x *AbortMultiUploadRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AbortMultiUploadRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AbortMultiUploadResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetMultiUploadProgressRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMultiUploadProgressRequest[number], err)
}

func (x *GetMultiUploadProgressRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMultiUploadProgressRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMultiUploadProgressResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMultiUploadProgressResponse[number], err)
}

func (x *GetMultiUploadProgressResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.UploadedChunks = append(x.UploadedChunks, v)
			return offset, err
		})
	return offset, err
}

func (x *MergeFileChunksRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MergeFileChunksRequest[number], err)
}

func (x *MergeFileChunksRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MergeFileChunksRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MergeFileChunksRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FileType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MergeFileChunksRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TotalChunks, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MergeFileChunksResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MergeFileChunksResponse[number], err)
}

func (x *MergeFileChunksResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MergeFileChunksResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FileUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MergeFileChunksResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileUploadStatusRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileUploadStatusRequest[number], err)
}

func (x *GetFileUploadStatusRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UploadId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFileUploadStatusResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFileUploadStatusResponse[number], err)
}

func (x *GetFileUploadStatusResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.IsCompleted, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetFileUploadStatusResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UploadedChunks, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetFileUploadStatusResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetDownloadUrlRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetDownloadUrlRequest[number], err)
}

func (x *GetDownloadUrlRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetDownloadUrlResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetDownloadUrlResponse[number], err)
}

func (x *GetDownloadUrlResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.DownloadUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadFileRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UploadFileRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *UploadFileRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.FileData) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetFileData())
	return offset
}

func (x *UploadFileRequest) fastWriteField3(buf []byte) (offset int) {
	if x.FileType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFileType())
	return offset
}

func (x *UploadFileRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Checksum == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetChecksum())
	return offset
}

func (x *UploadFileResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *NewMultiUploadRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *NewMultiUploadRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *NewMultiUploadRequest) fastWriteField2(buf []byte) (offset int) {
	if x.FileType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFileType())
	return offset
}

func (x *NewMultiUploadRequest) fastWriteField3(buf []byte) (offset int) {
	if x.TotalChunks == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetTotalChunks())
	return offset
}

func (x *URL) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *URL) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *URL) fastWriteField2(buf []byte) (offset int) {
	if x.ChunkNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetChunkNumber())
	return offset
}

func (x *NewMultiUploadResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *NewMultiUploadResponse) fastWriteField1(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUploadId())
	return offset
}

func (x *NewMultiUploadResponse) fastWriteField2(buf []byte) (offset int) {
	if x.PresignedUrls == nil {
		return offset
	}
	for i := range x.GetPresignedUrls() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPresignedUrls()[i])
	}
	return offset
}

func (x *AbortMultiUploadRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AbortMultiUploadRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUploadId())
	return offset
}

func (x *AbortMultiUploadRequest) fastWriteField2(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFileName())
	return offset
}

func (x *AbortMultiUploadResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetMultiUploadProgressRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetMultiUploadProgressRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUploadId())
	return offset
}

func (x *GetMultiUploadProgressRequest) fastWriteField2(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFileName())
	return offset
}

func (x *GetMultiUploadProgressResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMultiUploadProgressResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.UploadedChunks) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetUploadedChunks()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetUploadedChunks()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *MergeFileChunksRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *MergeFileChunksRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *MergeFileChunksRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUploadId())
	return offset
}

func (x *MergeFileChunksRequest) fastWriteField3(buf []byte) (offset int) {
	if x.FileType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFileType())
	return offset
}

func (x *MergeFileChunksRequest) fastWriteField4(buf []byte) (offset int) {
	if x.TotalChunks == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetTotalChunks())
	return offset
}

func (x *MergeFileChunksResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MergeFileChunksResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *MergeFileChunksResponse) fastWriteField2(buf []byte) (offset int) {
	if x.FileUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFileUrl())
	return offset
}

func (x *MergeFileChunksResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMessage())
	return offset
}

func (x *GetFileUploadStatusRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFileUploadStatusRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UploadId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUploadId())
	return offset
}

func (x *GetFileUploadStatusResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFileUploadStatusResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.IsCompleted {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetIsCompleted())
	return offset
}

func (x *GetFileUploadStatusResponse) fastWriteField2(buf []byte) (offset int) {
	if x.UploadedChunks == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetUploadedChunks())
	return offset
}

func (x *GetFileUploadStatusResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMessage())
	return offset
}

func (x *GetDownloadUrlRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetDownloadUrlRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *GetDownloadUrlResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetDownloadUrlResponse) fastWriteField1(buf []byte) (offset int) {
	if x.DownloadUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetDownloadUrl())
	return offset
}

func (x *UploadFileRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UploadFileRequest) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *UploadFileRequest) sizeField2() (n int) {
	if len(x.FileData) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetFileData())
	return n
}

func (x *UploadFileRequest) sizeField3() (n int) {
	if x.FileType == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFileType())
	return n
}

func (x *UploadFileRequest) sizeField4() (n int) {
	if x.Checksum == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetChecksum())
	return n
}

func (x *UploadFileResponse) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *NewMultiUploadRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *NewMultiUploadRequest) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *NewMultiUploadRequest) sizeField2() (n int) {
	if x.FileType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFileType())
	return n
}

func (x *NewMultiUploadRequest) sizeField3() (n int) {
	if x.TotalChunks == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetTotalChunks())
	return n
}

func (x *URL) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *URL) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *URL) sizeField2() (n int) {
	if x.ChunkNumber == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetChunkNumber())
	return n
}

func (x *NewMultiUploadResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *NewMultiUploadResponse) sizeField1() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUploadId())
	return n
}

func (x *NewMultiUploadResponse) sizeField2() (n int) {
	if x.PresignedUrls == nil {
		return n
	}
	for i := range x.GetPresignedUrls() {
		n += fastpb.SizeMessage(2, x.GetPresignedUrls()[i])
	}
	return n
}

func (x *AbortMultiUploadRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AbortMultiUploadRequest) sizeField1() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUploadId())
	return n
}

func (x *AbortMultiUploadRequest) sizeField2() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFileName())
	return n
}

func (x *AbortMultiUploadResponse) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetMultiUploadProgressRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetMultiUploadProgressRequest) sizeField1() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUploadId())
	return n
}

func (x *GetMultiUploadProgressRequest) sizeField2() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFileName())
	return n
}

func (x *GetMultiUploadProgressResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMultiUploadProgressResponse) sizeField1() (n int) {
	if len(x.UploadedChunks) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetUploadedChunks()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetUploadedChunks()[numIdxOrVal])
			return n
		})
	return n
}

func (x *MergeFileChunksRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *MergeFileChunksRequest) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *MergeFileChunksRequest) sizeField2() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUploadId())
	return n
}

func (x *MergeFileChunksRequest) sizeField3() (n int) {
	if x.FileType == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFileType())
	return n
}

func (x *MergeFileChunksRequest) sizeField4() (n int) {
	if x.TotalChunks == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetTotalChunks())
	return n
}

func (x *MergeFileChunksResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MergeFileChunksResponse) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *MergeFileChunksResponse) sizeField2() (n int) {
	if x.FileUrl == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFileUrl())
	return n
}

func (x *MergeFileChunksResponse) sizeField3() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMessage())
	return n
}

func (x *GetFileUploadStatusRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFileUploadStatusRequest) sizeField1() (n int) {
	if x.UploadId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUploadId())
	return n
}

func (x *GetFileUploadStatusResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFileUploadStatusResponse) sizeField1() (n int) {
	if !x.IsCompleted {
		return n
	}
	n += fastpb.SizeBool(1, x.GetIsCompleted())
	return n
}

func (x *GetFileUploadStatusResponse) sizeField2() (n int) {
	if x.UploadedChunks == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetUploadedChunks())
	return n
}

func (x *GetFileUploadStatusResponse) sizeField3() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMessage())
	return n
}

func (x *GetDownloadUrlRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetDownloadUrlRequest) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *GetDownloadUrlResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetDownloadUrlResponse) sizeField1() (n int) {
	if x.DownloadUrl == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetDownloadUrl())
	return n
}

var fieldIDToName_UploadFileRequest = map[int32]string{
	1: "FileName",
	2: "FileData",
	3: "FileType",
	4: "Checksum",
}

var fieldIDToName_UploadFileResponse = map[int32]string{}

var fieldIDToName_NewMultiUploadRequest = map[int32]string{
	1: "FileName",
	2: "FileType",
	3: "TotalChunks",
}

var fieldIDToName_URL = map[int32]string{
	1: "Url",
	2: "ChunkNumber",
}

var fieldIDToName_NewMultiUploadResponse = map[int32]string{
	1: "UploadId",
	2: "PresignedUrls",
}

var fieldIDToName_AbortMultiUploadRequest = map[int32]string{
	1: "UploadId",
	2: "FileName",
}

var fieldIDToName_AbortMultiUploadResponse = map[int32]string{}

var fieldIDToName_GetMultiUploadProgressRequest = map[int32]string{
	1: "UploadId",
	2: "FileName",
}

var fieldIDToName_GetMultiUploadProgressResponse = map[int32]string{
	1: "UploadedChunks",
}

var fieldIDToName_MergeFileChunksRequest = map[int32]string{
	1: "FileName",
	2: "UploadId",
	3: "FileType",
	4: "TotalChunks",
}

var fieldIDToName_MergeFileChunksResponse = map[int32]string{
	1: "Success",
	2: "FileUrl",
	3: "Message",
}

var fieldIDToName_GetFileUploadStatusRequest = map[int32]string{
	1: "UploadId",
}

var fieldIDToName_GetFileUploadStatusResponse = map[int32]string{
	1: "IsCompleted",
	2: "UploadedChunks",
	3: "Message",
}

var fieldIDToName_GetDownloadUrlRequest = map[int32]string{
	1: "FileName",
}

var fieldIDToName_GetDownloadUrlResponse = map[int32]string{
	1: "DownloadUrl",
}
