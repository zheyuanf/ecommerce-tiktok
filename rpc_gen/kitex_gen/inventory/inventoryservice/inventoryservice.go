// Code generated by Kitex v0.9.1. DO NOT EDIT.

package inventoryservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	inventory "github.com/zheyuanf/ecommerce-tiktok/rpc_gen/kitex_gen/inventory"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetStock": kitex.NewMethodInfo(
		getStockHandler,
		newGetStockArgs,
		newGetStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DecreaseStock": kitex.NewMethodInfo(
		decreaseStockHandler,
		newDecreaseStockArgs,
		newDecreaseStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"IncreaseStock": kitex.NewMethodInfo(
		increaseStockHandler,
		newIncreaseStockArgs,
		newIncreaseStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BatchGetStock": kitex.NewMethodInfo(
		batchGetStockHandler,
		newBatchGetStockArgs,
		newBatchGetStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	inventoryServiceServiceInfo                = NewServiceInfo()
	inventoryServiceServiceInfoForClient       = NewServiceInfoForClient()
	inventoryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return inventoryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return inventoryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return inventoryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InventoryService"
	handlerType := (*inventory.InventoryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "inventory",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func getStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.GetStockRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).GetStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetStockArgs:
		success, err := handler.(inventory.InventoryService).GetStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetStockArgs() interface{} {
	return &GetStockArgs{}
}

func newGetStockResult() interface{} {
	return &GetStockResult{}
}

type GetStockArgs struct {
	Req *inventory.GetStockRequest
}

func (p *GetStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.GetStockRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.GetStockRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetStockArgs_Req_DEFAULT *inventory.GetStockRequest

func (p *GetStockArgs) GetReq() *inventory.GetStockRequest {
	if !p.IsSetReq() {
		return GetStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetStockResult struct {
	Success *inventory.GetStockResponse
}

var GetStockResult_Success_DEFAULT *inventory.GetStockResponse

func (p *GetStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.GetStockResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.GetStockResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetStockResult) GetSuccess() *inventory.GetStockResponse {
	if !p.IsSetSuccess() {
		return GetStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.GetStockResponse)
}

func (p *GetStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetStockResult) GetResult() interface{} {
	return p.Success
}

func decreaseStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.DecreaseStockRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).DecreaseStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DecreaseStockArgs:
		success, err := handler.(inventory.InventoryService).DecreaseStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DecreaseStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDecreaseStockArgs() interface{} {
	return &DecreaseStockArgs{}
}

func newDecreaseStockResult() interface{} {
	return &DecreaseStockResult{}
}

type DecreaseStockArgs struct {
	Req *inventory.DecreaseStockRequest
}

func (p *DecreaseStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.DecreaseStockRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DecreaseStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DecreaseStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DecreaseStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DecreaseStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.DecreaseStockRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DecreaseStockArgs_Req_DEFAULT *inventory.DecreaseStockRequest

func (p *DecreaseStockArgs) GetReq() *inventory.DecreaseStockRequest {
	if !p.IsSetReq() {
		return DecreaseStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DecreaseStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DecreaseStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DecreaseStockResult struct {
	Success *inventory.DecreaseStockResponse
}

var DecreaseStockResult_Success_DEFAULT *inventory.DecreaseStockResponse

func (p *DecreaseStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.DecreaseStockResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DecreaseStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DecreaseStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DecreaseStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DecreaseStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.DecreaseStockResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DecreaseStockResult) GetSuccess() *inventory.DecreaseStockResponse {
	if !p.IsSetSuccess() {
		return DecreaseStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DecreaseStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.DecreaseStockResponse)
}

func (p *DecreaseStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DecreaseStockResult) GetResult() interface{} {
	return p.Success
}

func increaseStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.IncreaseStockRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).IncreaseStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *IncreaseStockArgs:
		success, err := handler.(inventory.InventoryService).IncreaseStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncreaseStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newIncreaseStockArgs() interface{} {
	return &IncreaseStockArgs{}
}

func newIncreaseStockResult() interface{} {
	return &IncreaseStockResult{}
}

type IncreaseStockArgs struct {
	Req *inventory.IncreaseStockRequest
}

func (p *IncreaseStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.IncreaseStockRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncreaseStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncreaseStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncreaseStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IncreaseStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.IncreaseStockRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncreaseStockArgs_Req_DEFAULT *inventory.IncreaseStockRequest

func (p *IncreaseStockArgs) GetReq() *inventory.IncreaseStockRequest {
	if !p.IsSetReq() {
		return IncreaseStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncreaseStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IncreaseStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IncreaseStockResult struct {
	Success *inventory.IncreaseStockResponse
}

var IncreaseStockResult_Success_DEFAULT *inventory.IncreaseStockResponse

func (p *IncreaseStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.IncreaseStockResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncreaseStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncreaseStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncreaseStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IncreaseStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.IncreaseStockResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncreaseStockResult) GetSuccess() *inventory.IncreaseStockResponse {
	if !p.IsSetSuccess() {
		return IncreaseStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncreaseStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.IncreaseStockResponse)
}

func (p *IncreaseStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IncreaseStockResult) GetResult() interface{} {
	return p.Success
}

func batchGetStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.BatchGetStockRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).BatchGetStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BatchGetStockArgs:
		success, err := handler.(inventory.InventoryService).BatchGetStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchGetStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBatchGetStockArgs() interface{} {
	return &BatchGetStockArgs{}
}

func newBatchGetStockResult() interface{} {
	return &BatchGetStockResult{}
}

type BatchGetStockArgs struct {
	Req *inventory.BatchGetStockRequest
}

func (p *BatchGetStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.BatchGetStockRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BatchGetStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BatchGetStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BatchGetStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BatchGetStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.BatchGetStockRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchGetStockArgs_Req_DEFAULT *inventory.BatchGetStockRequest

func (p *BatchGetStockArgs) GetReq() *inventory.BatchGetStockRequest {
	if !p.IsSetReq() {
		return BatchGetStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchGetStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BatchGetStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BatchGetStockResult struct {
	Success *inventory.BatchGetStockResponse
}

var BatchGetStockResult_Success_DEFAULT *inventory.BatchGetStockResponse

func (p *BatchGetStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.BatchGetStockResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BatchGetStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BatchGetStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BatchGetStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BatchGetStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.BatchGetStockResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchGetStockResult) GetSuccess() *inventory.BatchGetStockResponse {
	if !p.IsSetSuccess() {
		return BatchGetStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchGetStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.BatchGetStockResponse)
}

func (p *BatchGetStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchGetStockResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetStock(ctx context.Context, Req *inventory.GetStockRequest) (r *inventory.GetStockResponse, err error) {
	var _args GetStockArgs
	_args.Req = Req
	var _result GetStockResult
	if err = p.c.Call(ctx, "GetStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DecreaseStock(ctx context.Context, Req *inventory.DecreaseStockRequest) (r *inventory.DecreaseStockResponse, err error) {
	var _args DecreaseStockArgs
	_args.Req = Req
	var _result DecreaseStockResult
	if err = p.c.Call(ctx, "DecreaseStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncreaseStock(ctx context.Context, Req *inventory.IncreaseStockRequest) (r *inventory.IncreaseStockResponse, err error) {
	var _args IncreaseStockArgs
	_args.Req = Req
	var _result IncreaseStockResult
	if err = p.c.Call(ctx, "IncreaseStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetStock(ctx context.Context, Req *inventory.BatchGetStockRequest) (r *inventory.BatchGetStockResponse, err error) {
	var _args BatchGetStockArgs
	_args.Req = Req
	var _result BatchGetStockResult
	if err = p.c.Call(ctx, "BatchGetStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
