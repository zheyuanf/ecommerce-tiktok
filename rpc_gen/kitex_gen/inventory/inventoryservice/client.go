// Code generated by Kitex v0.9.1. DO NOT EDIT.

package inventoryservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	inventory "github.com/zheyuanf/ecommerce-tiktok/rpc_gen/kitex_gen/inventory"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetStock(ctx context.Context, Req *inventory.GetStockRequest, callOptions ...callopt.Option) (r *inventory.GetStockResponse, err error)
	DecreaseStock(ctx context.Context, Req *inventory.DecreaseStockRequest, callOptions ...callopt.Option) (r *inventory.DecreaseStockResponse, err error)
	IncreaseStock(ctx context.Context, Req *inventory.IncreaseStockRequest, callOptions ...callopt.Option) (r *inventory.IncreaseStockResponse, err error)
	BatchGetStock(ctx context.Context, Req *inventory.BatchGetStockRequest, callOptions ...callopt.Option) (r *inventory.BatchGetStockResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kInventoryServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInventoryServiceClient struct {
	*kClient
}

func (p *kInventoryServiceClient) GetStock(ctx context.Context, Req *inventory.GetStockRequest, callOptions ...callopt.Option) (r *inventory.GetStockResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStock(ctx, Req)
}

func (p *kInventoryServiceClient) DecreaseStock(ctx context.Context, Req *inventory.DecreaseStockRequest, callOptions ...callopt.Option) (r *inventory.DecreaseStockResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DecreaseStock(ctx, Req)
}

func (p *kInventoryServiceClient) IncreaseStock(ctx context.Context, Req *inventory.IncreaseStockRequest, callOptions ...callopt.Option) (r *inventory.IncreaseStockResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IncreaseStock(ctx, Req)
}

func (p *kInventoryServiceClient) BatchGetStock(ctx context.Context, Req *inventory.BatchGetStockRequest, callOptions ...callopt.Option) (r *inventory.BatchGetStockResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetStock(ctx, Req)
}
